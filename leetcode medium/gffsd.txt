	#include <bits/stdc++.h>

	using namespace std;

	#define int            long long int
	#define F              first
	#define S              second
	#define pb             push_back
	#define si             set <int>
	#define vi             vector <int>
	#define pii            pair <int, int>
	#define vpi            vector <pii>
	#define vpp            vector <pair<int, pii>>
	#define mii            map <int, int>
	#define mpi            map <pii, int>
	#define spi            set <pii>
	#define endl           "\n"
	#define sz(x)          ((int) x.size())
	#define all(p)         p.begin(), p.end()
	#define double         long double
	#define que_max        priority_queue <int>
	#define que_min        priority_queue <int, vi, greater<int>>
	#define bug(...)       __f (#__VA_ARGS__, __VA_ARGS__)
	#define print(a)       for(auto x : a) cout << x << " "; cout << endl
	#define print1(a)      for(auto x : a) cout << x.F << " " << x.S << endl
	#define print2(a,x,y)  for(int i = x; i < y; i++) cout<< a[i]<< " "; cout << endl


	int32_t singleNumber(vector<int>arr); 

	inline int power(int a, int b)
	{
		int x = 1;
		while (b)
		{
			if (b & 1) x *= a;
			a *= a;
			b >>= 1;
		}
		return x;
	}

	template <typename Arg1>
	void __f (const char* name, Arg1&& arg1) { cout << name << " : " << arg1 << endl; }
	template <typename Arg1, typename... Args>
	void __f (const char* names, Arg1&& arg1, Args&&... args)
	{
		const char* comma = strchr (names + 1, ',');
		cout.write (names, comma - names) << " : " << arg1 << " | "; __f (comma + 1, args...);
	}

	const int N = 200005;

	void solve() {
		int n;
		cin>>n;
		vector<int>m;
		for(int i=0;i<n;i++){
			int temp;
			cin>>temp;
			m.push_back(temp);
		}
		vector<int> arr = singleNumber(m);
		for (auto itr : arr)
			cout << itr << " ";
		// cout<<sol1<<" "<<sol2;
	}

	int32_t main()
	{
		ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

	#ifndef ONLINE_JUDGE
		freopen("input.txt",  "r",  stdin);
		freopen("output.txt", "w", stdout);
	#endif

		clock_t z = clock();

		int t = 1;
		// cin >> t;
		while (t--) solve();

		cerr << "Run Time : " << ((double)(clock() - z) / CLOCKS_PER_SEC);

		return 0;
	}



	// given 2N+2 numbers, where every number is coming twice except two numbers
	// find those two unique numbers.
	// it takes O(n)time and O(1)space.
	// returns f and s as int.
    int32_t singleNumber(vector<int>& nums) {
        int x=0;
        for(int i=0;i<nums.size();i++)
            x^=nums[i];
        int pos=1;
        while(!((x)&1)){
           pos++; 
            x>>=1;
        }
        int f=0,s=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]&(1<<(pos-1)))  f^=nums[i];
            else s^=nums[i];
        }
        return (f,s);
	}
	
	
	
	
	
	
	
	
	
---------------------------------------------------------------------------------------------------------------------------------




#include <bits/stdc++.h>

using namespace std;

#define int            long long int
#define F              first
#define S              second
#define pb             push_back
#define si             set <int>
#define vi             vector <int>
#define pii            pair <int, int>
#define vpi            vector <pii>
#define vpp            vector <pair<int, pii>>
#define mii            map <int, int>
#define mpi            map <pii, int>
#define spi            set <pii>
#define endl           "\n"
#define sz(x)          ((int) x.size())
#define all(p)         p.begin(), p.end()
#define double         long double
#define que_max        priority_queue <int>
#define que_min        priority_queue <int, vi, greater<int>>
#define bug(...)       __f (#__VA_ARGS__, __VA_ARGS__)
#define print(a)       for(auto x : a) cout << x << " "; cout << endl
#define print1(a)      for(auto x : a) cout << x.F << " " << x.S << endl
#define print2(a,x,y)  for(int i = x; i < y; i++) cout<< a[i]<< " "; cout << endl


string map_to_string(map<int ,set<string>>  &sorted_subsequence);
string possibleSubsequences(string s);
string subsequence(string s, int binary, int len);

inline int power(int a, int b)
{
	int x = 1;
	while (b)
	{
		if (b & 1) x *= a;
		a *= a;
		b >>= 1;
	}
	return x;
}

template <typename Arg1>
void __f (const char* name, Arg1&& arg1) { cout << name << " : " << arg1 << endl; }
template <typename Arg1, typename... Args>
void __f (const char* names, Arg1&& arg1, Args&&... args)
{
	const char* comma = strchr (names + 1, ',');
	cout.write (names, comma - names) << " : " << arg1 << " | "; __f (comma + 1, args...);
}

const int N = 200005;

void solve() {
	string s;
	cin >> s;
	string ans = possibleSubsequences(s);
	cout<<ans;
	//bug(n, m);
}

int32_t main()
{
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

#ifndef ONLINE_JUDGE
	freopen("input.txt",  "r",  stdin);
	freopen("output.txt", "w", stdout);
#endif

	clock_t z = clock();

	int t = 1;
	// cin >> t;
	while (t--) solve();

	cerr << "Run Time : " << ((double)(clock() - z) / CLOCKS_PER_SEC);

	return 0;
}


// function to return string of all possible subsequence of a given string
// input : string :: output : string
// time complexity O(N) and space complexity O(1)



string subsequence(string s, int binary, int len){
    string sub = "";
    for (int j = 0; j < len; j++)
        if (binary & (1 << j)) sub += s[j]; 
    return sub;
}
 

string possibleSubsequences(string s){ 
    map<int, set<string> > sorted_subsequence; 
    int len = s.size();   
	int limit = pow(2, len);     
    for (int i = 1; i <= limit - 1; i++) {         
        string sub = subsequence(s, i, len);        
		sorted_subsequence[sub.length()].insert(sub);
    } 
    string result = "";
    for (auto itr = sorted_subsequence.begin(); itr != sorted_subsequence.end(); ++itr)
    	result = result.push_back(sorted_subsequence(itr);
   	return result;
}



*----------------------------------------------------------------------------------------------------







	


